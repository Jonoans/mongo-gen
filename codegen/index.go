package codegen

import (
	"bufio"
	"fmt"
	"go/ast"
	"go/printer"
	"go/token"
	"log"
	"os"
	"path/filepath"

	"github.com/jonoans/mongo-gen/codegen/internal"
	"github.com/jonoans/mongo-gen/config"
	"github.com/jonoans/mongo-gen/utils"
)

func Generate(cfg *config.ConfigFile) error {
	decls, reservedNames := getInternalDefinitions()
	internal.InitReservedValues(reservedNames)
	internal.ReadAllTemplateFiles()

	pkg := initPackage(cfg)
	pkgFiles := pkg.GeneratePackageFiles()

	createOutputDirectory(&cfg.Output)
	writeDefinitionsPackage(&cfg.Output, decls)
	for _, pkgFile := range pkgFiles {
		pkgFile.Init()
		pkgFile.Sort()
		pkgFile.WriteToFile(&cfg.Output)
	}

	return nil
}

func initPackage(cfg *config.ConfigFile) *internal.Package {
	moduleRoot := cfg.Models.ModuleRoot
	userModels, generatedModels := filepath.Join(moduleRoot, cfg.Models.PackagePath), filepath.Join(moduleRoot, cfg.Output.PackagePath)
	userPackagePath, generatedPackagePath := filepath.ToSlash(userModels), filepath.ToSlash(generatedModels)
	loadedPkgs, err := loadPackage(userPackagePath, generatedPackagePath)
	if err != nil {
		log.Fatal(err)
	}

	userPkg, outputPkg := loadedPkgs[0], loadedPkgs[1]
	generatedLines, err := readFiles(outputPkg.GoFiles)
	if err != nil {
		log.Fatal(err)
	}

	delete(generatedLines, "codegen_.go")
	for _, f := range cfg.Output.IgnoredFiles {
		delete(generatedLines, f)
	}

	pkgObject := &internal.Package{
		InputUser:             userPkg,
		InputGenerated:        outputPkg,
		InputGeneratedLines:   generatedLines,
		IgnoredUserFiles:      cfg.Models.IgnoredFiles,
		IgnoredGeneratedFiles: cfg.Output.IgnoredFiles,
	}
	pkgObject.Init()
	return pkgObject
}

func readFiles(files []string) (map[string][]string, error) {
	fileLines := make(map[string][]string)

	for _, file := range files {
		fh, err := os.Open(file)
		if err != nil {
			return nil, err
		}
		defer fh.Close()

		lines := []string{}
		scanner := bufio.NewScanner(fh)
		for scanner.Scan() {
			lines = append(lines, scanner.Text())
		}

		base := utils.BaseFilename(file)
		fileLines[base] = lines
	}

	return fileLines, nil
}

func createOutputDirectory(cfg *config.OutputConfig) {
	err := os.MkdirAll(cfg.PackagePath, os.ModeDir|os.ModePerm)
	if err != nil {
		log.Fatalf("Error creating output directory: %s", err)
	}
}

func writeDefinitionsPackage(cfg *config.OutputConfig, decls []ast.Decl) {
	outputFilepath := filepath.Join(cfg.PackagePath, "codegen_.go")
	fh, err := os.OpenFile(outputFilepath, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	defer fh.Close()
	if err != nil {
		log.Fatalf("Could not open output file: %s", err)
	}

	_, err = fh.WriteString(fmt.Sprintf("package %s\n\n", cfg.PackageName))
	if err != nil {
		log.Fatalf("Could not write to output file: %s", err)
	}

	_, err = fh.WriteString("// Code generated by mongo-gen. DO NOT EDIT.\n\n")
	if err != nil {
		log.Fatalf("Could not write to output file: %s", err)
	}

	fset := token.NewFileSet()
	for _, decl := range decls {
		err = printer.Fprint(fh, fset, decl)
		if err != nil {
			log.Fatalf("Could not write to output file: %s", err)
		}

		_, err = fh.WriteString("\n\n")
		if err != nil {
			log.Fatalf("Could not write to output file: %s", err)
		}
	}
}
